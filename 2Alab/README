NAME: Andrew Yong
EMAIL: yong.andrew11@gmail.com
ID: 604905807

known bugs:
if threads run more than a second, big no no

2.1.1
a) starting from 1000 iterations, with about 10 threads, does race conditions appear
with more iterations it only gets more consistent: with 10000 iterations, race conditions
are almost guaranteed to happen
b) with smaller iterations, threads can run and finish without the other threads even being initiated. 
thus race conditions can't happen. with larger iterations, the threads run for longer, 
increasing probability that a thread steps over another thread

2.1.2
a) yields are much slower because the threads give up the CPU for all the other threads.
Every time you add, context switch happens
b) the additional time is due to all the context switching that's going on 
c) no, because the time for each add is interrupted by the scheduler and context switches

2.1.3
a) if more threads are created, more time goes to context switching and blocking
but increasing the iterations averages the costs of that out
b) thus the correct cost is the one with the most iterations and least threads

2.1.4:
a) lower threads means less chance of blocking, and the threads don't have to wait for each other
b) the more threads there are, the higher chance of blocking and thus the threads have to wait.
That takes up CPU time and makes it take longer to finish





